ext{
    versions = [:]
    libraries = [:]
}
versions.arc = "v145"
libraries.jnigen = [
        "com.github.libgdx.gdx-jnigen:gdx-jnigen:$versions.jnigen"
]
libraries.getArc = { String moduleName ->
    return "com.github.Anuken.Arc:$moduleName:${versions.arc}"
}
libraries.arcCore = libraries.getArc("arc-core")

allprojects{
    if(project.name.startsWith("my")) return;
    apply plugin: 'maven-publish'
    group = 'com.github.Zelaux.ZelauxArcLib'
    version = '1.0'
    buildscript{
        repositories{
            mavenCentral()
            maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
            google()
            maven{ url 'https://jitpack.io' }
        }
    }

    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
        maven{ url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository/' }
    }

    ext.aproj = { String module ->
        if(findProject(module) != null){
            return project(module)
        }else{
            return project(":ZelauxArcLib" + module)
        }
    }

    tasks.withType(JavaCompile){
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
    }
}

Set<Project> projects = (System.getenv("JITPACK") != "true" ? subprojects - aproj(":test") : subprojects)

String calculateName(Project proj){
//    Set<Project> projects = System.getenv("JITPACK") != "true" ? rootProject.subprojects - project(":test") : rootProject.subprojects
    if(proj.parent == rootProject) return proj.name;
    return calculateName(proj.parent) + "-" + proj.name
}

configure(projects){
    if(project.name.startsWith("my")) return;
    apply plugin: "java-library"

    compileJava{
        options.fork = true
        options.incremental = true
    }

    java{
        withJavadocJar()
        withSourcesJar()
    }
    def selfProject = project
    publishing{
        publications{
            maven(MavenPublication){
                from components.java
                artifactId = calculateName(selfProject)
//                name
            }
        }
    }

}

void eachChild(Set<Project> set){
    configure(set){
        dependencies{
            if(subprojects.size() == 0) compileOnly "org.jetbrains:annotations:24.0.1"
        }
//        sourceSets
        eachChild(subprojects)
    }
}


eachChild(projects)
/*
static void printChild(int indent, Project project){
    println "- ".repeat(indent)+project.name
    for(final def sub in project.subprojects){
        printChild(indent+1,sub)
    }
}
printChild(0,project)
*/

repositories{
    mavenCentral()
}
